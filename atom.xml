<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ganxinming.github.io</id>
    <title>Joke</title>
    <updated>2019-06-11T12:35:33.762Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ganxinming.github.io"/>
    <link rel="self" href="https://ganxinming.github.io/atom.xml"/>
    <subtitle>那些杀不死你的，必将使你变得更加怪异。</subtitle>
    <logo>https://ganxinming.github.io/images/avatar.png</logo>
    <icon>https://ganxinming.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Joke</rights>
    <entry>
        <title type="html"><![CDATA[Concurrent并发包下的类]]></title>
        <id>https://ganxinming.github.io/post/concurrent-bing-fa-bao-xia-de-lei</id>
        <link href="https://ganxinming.github.io/post/concurrent-bing-fa-bao-xia-de-lei">
        </link>
        <updated>2019-06-11T01:38:37.000Z</updated>
        <content type="html"><![CDATA[<p>1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda表达式]]></title>
        <id>https://ganxinming.github.io/post/lambda-biao-da-shi</id>
        <link href="https://ganxinming.github.io/post/lambda-biao-da-shi">
        </link>
        <updated>2019-06-10T12:41:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="lambda简单使用">Lambda简单使用</h3>
<h4 id="1基本语法">1.基本语法</h4>
<p>基本语法:
(parameters) -&gt; expression
或
(parameters) -&gt;{ statements; }</p>
<pre><code>/ 1. 不需要参数,返回值为 5  
() -&gt; 5  
  
// 2. 接收一个参数(数字类型),返回其2倍的值  
x -&gt; 2 * x  
  
// 3. 接受2个参数(数字),并返回他们的差值  
(x, y) -&gt; x – y  
  
// 4. 接收2个int型整数,返回他们的和  
(int x, int y) -&gt; x + y  
  
// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  
(String s) -&gt; System.out.print(s)  
</code></pre>
<h4 id="2遍历list">2.遍历list</h4>
<pre><code>List&lt;String&gt; players =  Arrays.asList(atp);  
  
// 以前的循环方式  
for (String player : players) {  
     System.out.print(player + &quot;; &quot;);  
}  
  
// 使用 lambda 表达式以及函数操作(functional operation)  
players.forEach((player) -&gt; System.out.print(player + &quot;; &quot;));  
   
// 在 Java 8 中使用双冒号操作符(double colon operator)  
players.forEach(System.out::println);  
</code></pre>
<h4 id="3实现线程">3.实现线程</h4>
<pre><code>// 1.1使用匿名内部类  
new Thread(new Runnable() {  
    @Override  
    public void run() {  
        System.out.println(&quot;Hello world !&quot;);  
    }  
}).start();  
  
// 1.2使用 lambda expression  
new Thread(() -&gt; System.out.println(&quot;Hello world !&quot;)).start();  
  
// 2.1使用匿名内部类  
Runnable race1 = new Runnable() {  
    @Override  
    public void run() {  
        System.out.println(&quot;Hello world !&quot;);  
    }  
};  
  
// 2.2使用 lambda expression  
Runnable race2 = () -&gt; System.out.println(&quot;Hello world !&quot;);  
   
// 直接调用 run 方法(没开新线程哦!)  
race1.run();  
race2.run();  
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Synchronized关键字]]></title>
        <id>https://ganxinming.github.io/post/synchronized-guan-jian-zi</id>
        <link href="https://ganxinming.github.io/post/synchronized-guan-jian-zi">
        </link>
        <updated>2019-06-10T02:33:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="synchonized分别不同加锁方法">Synchonized分别不同加锁方法</h2>
<p>1.给某个属性对象加锁。
private Object o=new Object();<br>
sychronized(o){}.<br>
2.给当前对象加锁(锁的是当前对象，当多个线程调用这个类时，使用同一个对象时，只有先获得的先执行)<br>
sychronized(this){}.<br>
3.给方法加锁。（相当于sychronized(this），就是加锁当前对象）
public synchronized  void m(){}<br>
4.给静态方法加锁。（这里等同于T.class，给类对象加锁）
public synchronized static void m() 。<br>
5.给类对象加锁<br>
synchronized(T.class)</p>
<h3 id="记住synchonized只是锁对象"><strong>记住Synchonized只是锁对象</strong></h3>
<p>代码如下</p>
<pre><code>package basis.ThreadTest.simple;

/**
 * @Author Badribbit
 * @create 2019/6/10 10:52
 * @Define Synchronized关键字测试(五种锁对象)
 * @Tutorials
 * @Opinion 1.new Thread(synchronizedTest)和new Thread(new SynchronizedTest())的区别。
 *          锁当前对象或变量对象时对同一个synchronizedTest就有效，但是对每次new SynchronizedTest()无效，因为这些是新new的对象
 *          锁类对象，对new SynchronizedTest()无效。但是得保证里面使用的变量是静态的，如果不是静态的，实际上那些成员变量还是各有各的默认值,
 *          不能达到统一访问的目的。
 *          2.锁静态方法，里面必须是static变量。锁class对象，没有必须，但是想要统一访问，也要使用static变量。
 */
public class SynchronizedTest implements Runnable{
    private  Object o=new Object();
    private  volatile int con=0;
    private  volatile static int sum=0;
    public void m1() throws InterruptedException {
        synchronized (o) {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);
        }
    }
    public void m2() throws InterruptedException {
        synchronized (this) {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);
        }
    }
    public synchronized void m3() throws InterruptedException {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);

    }
    public synchronized static void m4() throws InterruptedException {
        System.out.println(Thread.currentThread().getName() + &quot;的sum是:&quot; + sum++);
        Thread.sleep(100);
    }
    public void m5() throws InterruptedException {
        synchronized (SynchronizedTest.class) {
            System.out.println(Thread.currentThread().getName() + &quot;的sum是:&quot; + sum++);
            Thread.sleep(100);
        }
    }
    @Override
    public void run() {
        try {
            m5();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    public static void main(String[] args) {
        SynchronizedTest synchronizedTest=new SynchronizedTest();
        /*for (int i=0;i&lt;9;i++){
            new Thread(synchronizedTest,String.valueOf((char)(i+97))).start();
        }*/
        for (int i=0;i&lt;9;i++){
            new Thread(new SynchronizedTest(),String.valueOf((char)(i+97))).start();
        }
    }


}

</code></pre>
<h4 id="锁重入">锁重入</h4>
<p>可以在Synchonized中调用其他Synchonized方法。</p>
]]></content>
    </entry>
</feed>