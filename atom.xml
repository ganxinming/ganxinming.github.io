<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ganxinming.github.io</id>
    <title>BadRibbit</title>
    <updated>2019-09-26T13:18:11.067Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ganxinming.github.io"/>
    <link rel="self" href="https://ganxinming.github.io/atom.xml"/>
    <subtitle>那些杀不死你的，必将使你变得更加怪异。</subtitle>
    <logo>https://ganxinming.github.io/images/avatar.png</logo>
    <icon>https://ganxinming.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, BadRibbit</rights>
    <entry>
        <title type="html"><![CDATA[静态类的加载时机]]></title>
        <id>https://ganxinming.github.io/post/jing-tai-lei-de-jia-zai-shi-ji</id>
        <link href="https://ganxinming.github.io/post/jing-tai-lei-de-jia-zai-shi-ji">
        </link>
        <updated>2019-09-26T12:44:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类什么时候加载初始化">类什么时候加载，初始化？</h2>
<p>讨论这个问题之前先看下这个问题</p>
<pre><code class="language-java">public class Singleton {	
        private Singleton() {
	}
	private static Singleton instance = new Singleton();
	public static Singleton getInstance() {
		return instance;
	}
}
</code></pre>
<p>这是个饿汉单例模式，网上都是说饿汉会当类装载的时候就会创建类实例，不管你用不用，先创建出来，浪费内存。其实这话感觉不太完整。就自己试了下，在一个类中仅仅维持一个单例对象的引用，但是未赋值(null)。但此时Singleton并没有执行静态类的初始化方法。</p>
<p><strong>那么问题来了，如果这个类不调用getInstance，那么也就不会执行new Singleton。也就没有浪费内存一说。但是网上都说浪费内存，说明的确有问题。</strong></p>
<p>那么什么时候加载呢？JVM中并没有规定加载的时机，它是由JVM自己把握的，<strong>但是对于初始化确实有顺序确定的。以下五种情况进行初始化（当然也就包含了前面加载，验证，准备，解析）：</strong></p>
<p>1.遇到 <strong>new、getstatic、putstatic、invokestatic</strong> 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。(<strong>所以说涉及到静态的设置或者获取，都会促使类的的初始化</strong>)</p>
<p>2.使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。(<strong>反射</strong>)</p>
<p>3.当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。(<strong>先父类</strong>)</p>
<p>4.当虚拟机启动时，用户需要指定一个要执行的Main主类，虚拟机会先执行该主类。(<strong>main入口类</strong>)</p>
<p>5.当使用JDK1.7的动态语言时，如果一个methodHandler实例最后的解析结果的方法句柄所对应的类没有初始化则必须先出发初始化。</p>
<p>综上所述：所以说饿汉浪费内存，可能指的是，当调用其他静态方法或静态变量，导致整个类初始化，而导致提前初始化对象，浪费内存。而静态内部类就没有这样问题,调用其他静态代码块就不会初始化内存。</p>
<pre><code class="language-java">public class Singleton {	
    private Singleton() {
	}
	private static class  InnerSingle{
        private static Singleton instance=new Singleton();
    }
	public static Singleton getInstance() {
		return instance;
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树]]></title>
        <id>https://ganxinming.github.io/post/shu</id>
        <link href="https://ganxinming.github.io/post/shu">
        </link>
        <updated>2019-09-10T14:41:21.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1.二叉查找树</strong></p>
<ul>
<li>
<p>任意节点左子树不为空,则左子树的值均小于根节点的值.</p>
</li>
<li>
<p>任意节点右子树不为空,则右子树的值均大于于根节点的值.</p>
</li>
<li>
<p>任意节点的左右子树也分别是二叉查找树.</p>
</li>
<li>
<p>没有键值相等的节点</p>
<p>局限:因为不是平衡的所以最后会退化成一条线的情况，时间复杂度又回到n了。</p>
</li>
</ul>
<p><strong>2.AVL(平衡二叉树)</strong></p>
<p>AVL树是带有平衡条件的二叉查找树,一般是用平衡因子差值判断是否平衡并通过旋转来实现平衡,左右子树树高不超过1。不管我们是执行插入还是删除操作,只要不满足上面的条件,就要通过旋转来保持平衡,而旋转是非常耗时的,由此我们可以知道AVL树适合用于插入删除次数比较少，但查找多的情况。</p>
<p>​	局限:维持平衡很艰难，很耗时，查找多，插入删除少时，性能还是优于红黑树的。</p>
<p><strong>3.红黑树</strong></p>
<p>一种二叉查找树,但在每个节点增加一个存储位表示节点的颜色,可以是red或black。通过对任何一条从根到叶子的路径上各个节点着色的方式的限制,红黑树确保没有一条路径会比其它路径长出两倍.它是一种弱平衡二叉树(<strong>由于是若平衡,可以推出,相同的节点情况下,AVL树的高度低于红黑树</strong>),相对于要求严格的AVL树来说,它的旋转次数变少,所以对于搜索,插入,删除操作多的情况下,我们就用红黑树。</p>
<ul>
<li>
<p>每个节点非红即黑.</p>
</li>
<li>
<p>根节点是黑的。</p>
</li>
<li>
<p>每个叶节点(<strong>叶节点即树尾端NUL指针或NULL节点</strong>)都是黑的.</p>
</li>
<li>
<p>如果一个节点是红的,那么它的两儿子都是黑的.</p>
</li>
<li>
<p>对于任意节点而言,其到叶子点树NIL指针的每条路径都包含相同数目的黑节点。</p>
</li>
</ul>
<p><img src="https://ganxinming.github.io/post-images/1568126578863.png" alt=""></p>
<p><strong>4.B树(平衡多路查找树)</strong></p>
<p>B树是为了提高磁盘或外部存储设备查找效率而产生的一种多路平衡查找树。</p>
<p>与红黑树相比,在相同的的节点的情况下,一颗B/B+树的高度远远小于红黑树的高度，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。</p>
<p>磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度。</p>
<ul>
<li>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</li>
<li>根结点的儿子数为[2, M]；</li>
<li>除根结点以外的非叶子结点的儿子数为[M/2, M]；</li>
<li>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</li>
<li>非叶子结点的关键字个数=指向儿子的指针个数-1；</li>
<li>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</li>
<li>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</li>
<li>所有叶子结点位于同一层；</li>
</ul>
<p><strong>5.B+树</strong></p>
<p>应文件系统所需而产生的一种B树的变形树(<strong>文件的目录一级一级索引,只有最底层的叶子节点(文件)保存数据</strong>.),非叶子节点只保存<strong>索引</strong>,不保存实际的数据,数据都保存在叶子节点中。</p>
<ul>
<li>非叶子节点的子树指针与关键字个数相同;</li>
<li>非叶子节点的子树指针p[i],指向关键字值属于[k[i],k[i+1]]的子树.(B树是开区间,也就是说B树不允许关键字重复,B+树允许重复)；</li>
<li>为所有叶子节点增加一个链指针.</li>
<li>所有关键字都在叶子节点出现(稠密索引). (且链表中的关键字恰好是有序的);</li>
<li>非叶子节点相当于是叶子节点的索引(稀疏索引),叶子节点相当于是存储(关键字)数据的数据层.</li>
<li>更适合于文件系统;</li>
</ul>
<h4 id="为什么说btree比b树更适合实际应用中操作系统的文件索引和数据索引">为什么说B+tree比B树更适合实际应用中操作系统的文件索引和数据索引?</h4>
<p>1.由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p>
<p>2.B树在提高了IO性能的同时并没有解决元素遍历的我效率低下的问题,正是为了解决这个问题,B+树应用而生.B+树只需要去遍历叶子节点就可以实现整棵树的遍历.</p>
<p><strong>8.哈夫曼树(最优二叉树)</strong></p>
<p>当用 n 个结点（都做叶子结点且都有各自的权值）试图构建一棵树时，如果构建的这棵树的带权路径长度最小，称这棵树为“最优二叉树”，有时也叫“赫夫曼树”或者“哈夫曼树”。</p>
<p>假设有n个结点，n个结点的权值分别为w1,w2,...,wn，构成的二叉树的集合为F={T1,T2,...,Tn}，则可构造一棵含有n个叶子结点的哈夫曼树。步骤如下：</p>
<p>（1）从F中选取两棵根结点权值最小的树作为左右子树构造一棵新的二叉树，其新的二叉树的权值为其左右子树根结点权值之和；</p>
<p>（2）从F中删除上一步选取的两棵二叉树，将新构造的树放到F中；</p>
<p>（3）重复（1）（2），直到F只含一棵树为止。<br>
(简单点说，将每次两个节点合成最小值，在放入进去，继续选出两个最小值，依次类推)</p>
<p><img src="https://ganxinming.github.io/post-images/1568126605572.png" alt=""></p>
<p><img src="https://ganxinming.github.io/post-images/1568126614173.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql的MVCC到底是啥？]]></title>
        <id>https://ganxinming.github.io/post/mysql-de-mvcc-dao-di-shi-sha</id>
        <link href="https://ganxinming.github.io/post/mysql-de-mvcc-dao-di-shi-sha">
        </link>
        <updated>2019-09-01T10:19:13.000Z</updated>
        <content type="html"><![CDATA[<p>正如标题，MVCC到底是什么？<br>
MVCC：多版本并发控制。把数据库的行锁与行的多个版本结合起来，实现并发控制。<br>
<strong>作用</strong>:<br>
<strong>1.Innodb的MVCC能防止幻读的发生。(不是每个MVCC都可以，看MVCC怎么实现)</strong><br>
<strong>2.实现了多个事务并发下，读操作的非阻塞。解决了脏读和重复读</strong><br>
<strong>场景</strong>：MVCC只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为READ UNCOMMITTED总是读取最新的数据行，而不是符合当前事务版本的数据。行，而SERIALIZABLE会对所有读取到的行都加锁。<br>
<strong>原理</strong>：MVCC保存了某一时刻数据的一个快照。意思就是无论事物运行了多久，它们都能看到一致的数据。也就是说在相同的时间下，不同的事物看相同表的数据是不同的。<br>
<strong>底层原理</strong>：通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（删除时间）。并且存储的并不是真实的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。<br>
<strong>事务操作</strong>:<br>
SELECT<br>
InnoDB会根据以下两个条件检查没行记录：<br>
a. InnoDB只会查找版本早于当前事务版本的数据行（也就是，行的系统版本小于或等于事务的系统版本号），这样可以确保事务读取到的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。<br>
b. 行的删除版本要么未定义，要么大于当前事务的版本号。这样可以确保事务读取到的行,在事务之前未被删除。只有符合上述两个条件的记录，才能被作为返回查询结果.<br>
INSERT<br>
InnoDB为新插入的一行保存当前系统版本号作为行版本号<br>
DELETE<br>
InnoDB为删除的每一行保存当前系统版本号作为删除标识,如果事务a版本号为3且之后执行了删除事务b的版本号为5，那么即使删除了数据，在事务a中还是能查出数据。<br>
UPDATE<br>
UPDATE为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识。</p>
<p><strong>锁</strong>：<br>
MySQL InnoDB支持三种行锁定方式：<br>
行锁（Record Lock）:锁直接加在索引记录上面，锁住的是key。<br>
<strong>间隙锁（Gap Lock）:锁定索引记录间隙，确保索引记录的间隙不变。相当于在行间隙的上或下加锁。这样就不能随便加锁。</strong><br>
<strong>Next-Key Lock ：行锁和间隙锁组合起来就叫Next-Key Lock</strong><br>
<strong>默认情况下，InnoDB工作在可重复读隔离级别下，并且会以Next-Key Lock的方式对数据行进行加锁，这样可以有效防止幻读的发生</strong>。<br>
扩展锁的知识：<br>
X :写锁：又称排他锁、X锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。<br>
S:读锁：也叫共享锁、S锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S 锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。<br>
IX::意向排他锁：表示有加排他锁的意向。<br>
IS::意向共享锁：表示有加共享锁的意向。<br>
<strong>顺便提下日志</strong><br>
<strong>binlog：</strong><br>
MySQL是多存储引擎的，不管使用那种存储引擎，都会有binlog，而不一定有redo log，简单的说，binlog是MySQL Server层的，redo log是InnoDB层的。<br>
binlog:用于记录用户对数据库更新的SQL语句信息，例如更改数据库表和更改内容的SQL语句都会记录到binlog里，但是对库表等内容的查询不会记录<br>
<strong>redo和undo：</strong><br>
redo log是重做日志，提供前滚操作，undo log是回滚日志，提供回滚操作。<br>
1.redo log通常是物理日志，记录的是数据页的物理修改，而不是某一行或某几行修改成怎样怎样，它用来恢复提交后的物理数据页(恢复数据页，且只能恢复到最后一次提交的位置)。<br>
2.undo用来回滚行记录到某个版本。undo log一般是逻辑日志，根据每行记录进行记录。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p>
<h3 id="mvcc就是利用undo实现的当读取的某一行被其他事务锁定时它可以从undo-log中分析出该行记录以前的数据是什么从而提供该行版本信息让用户实现非锁定一致性读取">MVCC就是利用undo实现的，当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。</h3>
<h1 id="总结1无非就是通过两个标志位记录版本号来实现多事务操作下读的非阻塞即不会因为同一时刻受到其他事物的增删改的影响利用undo日志查看到版本号-2通过-next-key-lock-实现防止幻读的发生">总结：1.无非就是通过两个标志位记录版本号，来实现多事务操作下，读的非阻塞(即不会因为同一时刻受到其他事物的增删改的影响，利用undo日志查看到版本号)。2.通过 Next-Key Lock 实现防止幻读的发生。</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AQS和CAS]]></title>
        <id>https://ganxinming.github.io/post/aqs-he-cas</id>
        <link href="https://ganxinming.github.io/post/aqs-he-cas">
        </link>
        <updated>2019-08-25T06:51:11.000Z</updated>
        <content type="html"><![CDATA[<h4 id="aqs队列同步器它是用来构建锁和其他同步组件的基础框架-是一个抽象类只有方法没有实现通过定义模板方法的方式提供了一套实现锁的模板其最基本的锁实现方式需要子类复写模板">AQS:队列同步器，它是用来构建锁和其他同步组件的基础框架。是一个抽象类，只有方法没有实现，通过定义模板方法的方式提供了一套实现锁的模板，其最基本的锁实现方式需要子类复写模板：</h4>
<p>内部：</p>
<p>/指向同步队列队头，<strong>Node为他的内部类</strong><br>
private transient volatile Node head;</p>
<p>//指向同步的队尾<br>
private transient volatile Node tail;</p>
<p>//同步状态，0代表锁未被占用，1代表锁已被占用</p>
<p>private volatile int state;</p>
<h5 id="state表示当前锁状态0表示没用1表示有人占用了">state：表示当前锁状态，0表示没用，1表示有人占用了。</h5>
<h5 id="同步队列它是一个双端队列便于对节点的操作">同步队列：它是一个双端队列，便于对节点的操作。</h5>
<p>注意head为空结点，不存储信息。</p>
<p>当进行lock(),加锁后，判断state的值是否为0，如果是，获得该锁，并将state置为1。如果不是，则将当前</p>
<h3 id="线程封装成node节点加入同步队列-node的数据结构也可看出其包含了需要同步的线程本身以及线程的状态如是否被阻塞是否等待唤醒是否已经被取消等">线程封装成Node节点，加入同步队列。（<strong>Node的数据结构也可看出，其包含了需要同步的线程本身以及线程的状态，如是否被阻塞，是否等待唤醒，是否已经被取消等</strong>）</h3>
<p>每个Node结点内部关联其前继结点prev和后继结点next，方便唤醒下一个线程。</p>
<h4 id="两种模式shared和exclusive常量分别代表共享模式和独占模式">两种模式：SHARED和EXCLUSIVE常量分别代表共享模式和独占模式</h4>
<p>所谓共享模式是一个锁允许多条线程同时操作，如信号量 Semaphore 采用的就是基于 AQS 的共享模式实现的</p>
<p>而独占模式则是同一个时间段只能有一个线程对共享资源进行操作，多余的请求线程需要排队等待，如 ReentranLock。</p>
<h5 id="那怎么实现这两者模式呢">那怎么实现这两者模式呢？</h5>
<pre><code>//AQS中提供的主要模板方法，由子类实现。
public abstract class AbstractQueuedSynchronizer
    extends AbstractOwnableSynchronizer{
//独占模式下获取锁的方法
    protected boolean tryAcquire(int arg) {
        throw new UnsupportedOperationException();
    }
//独占模式下解锁的方法
protected boolean tryRelease(int arg) {
    throw new UnsupportedOperationException();
}

//共享模式下获取锁的方法
protected int tryAcquireShared(int arg) {
    throw new UnsupportedOperationException();
}

//共享模式下解锁的方法
protected boolean tryReleaseShared(int arg) {
    throw new UnsupportedOperationException();
}
</code></pre>
<hr>
<p>AQS主要提供模板方法，主要实现，还是靠实现类。看下面，reentrantLock怎么实现独占模式的？</p>
<h2 id="aqs和reentrantlock关系">AQS和ReentrantLock关系</h2>
<p>ReentrantLock底层的加锁和解锁就是通过AQS。</p>
<p>当state=0，说明没有线程占用。如果state=1，则封装成Node加入<strong>同步队列</strong>。</p>
<p>当<strong>Condition</strong>调用await()方法后，线程将会加入<strong>等待队列</strong>中（注意这里是等待队列）而当Condition调用signal()方法后，线程将从等待队列转移动同步队列中进行锁竞争。</p>
<h5 id="区别同步队列是竞争资源时发现被占用了进入同步队列-等待队列是还未参加被人通知满了需要等待">区别：同步队列是竞争资源时发现被占用了，进入同步队列。等待队列是，还未参加，被人通知满了，需要等待。</h5>
<h2 id="reentrantlock内部存在3个实现类分别是sync-nonfairsync-fairsync其中sync继承自aqs实现了解锁tryrelease方法而nonfairsync非公平锁-fairsync公平锁则继承自sync实现了获取锁的tryacquire方法">ReentrantLock内部存在3个实现类，分别是Sync、NonfairSync、FairSync，其中Sync继承自AQS实现了解锁tryRelease()方法，而NonfairSync(非公平锁)、 FairSync(公平锁)则继承自Sync，实现了获取锁的tryAcquire()方法。</h2>
<p>这样就可以同过类来实现，独占模式。所以模板方法就好在这里，通过实现方法实现，不同的需要实现不同方法，但是底层又是同一套AQS组件。</p>
<p>看下ReentrantLock源码：</p>
<pre><code>/默认构造，创建非公平锁NonfairSync
public ReentrantLock() {
    sync = new NonfairSync();
}
//根据传入参数创建锁类型
public ReentrantLock(boolean fair) {
    sync = fair ? new FairSync() : new NonfairSync();
}

//加锁操作
public void lock() {
     sync.lock();
}

/**
 * 非公平锁实现
 首先对同步状态执行CAS操作，尝试把state的状态从0设置为1，如果返回true则代表获取同步状态成功，也就是当前线程获取锁成功，如果失败，则执行acquire（1）再次尝试。
 */
static final class NonfairSync extends Sync {
    //加锁
    final void lock() {
        //执行CAS操作，获取同步状态
        if (compareAndSetState(0, 1))
       //成功则将独占锁线程设置为当前线程  
          setExclusiveOwnerThread(Thread.currentThread());
        else
            //否则再次请求同步状态，
            acquire(1);
    }
}
public final void acquire(int arg) {
    //再次尝试获取同步状态，这里传入参数arg表示要获取同步状态后设置的值(即要设置state的值)，因为要获取锁，而status为0时是释放锁，1则是获取锁
    //tryAcquire(arg)返回true，acquireQueued自然不会执行，这是最理想的，因为毕竟当前线程已获取到锁，如果tryAcquire(arg)返回false，则会执行addWaiter(Node.EXCLUSIVE)进行入队操作
    if (!tryAcquire(arg) &amp;&amp;
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}

/**
 * 释放锁实现
 */
 //ReentrantLock类的unlock
public void unlock() {
    sync.release(1);
}

//AQS类的release()方法
public final boolean release(int arg) {
    //尝试释放锁
    if (tryRelease(arg)) {

        Node h = head;
        if (h != null &amp;&amp; h.waitStatus != 0)
            //唤醒后继结点的线程
            unparkSuccessor(h);
        return true;
    }
    return false;
}

//ReentrantLock类中的内部类Sync实现的tryRelease(int releases) 
protected final boolean tryRelease(int releases) {

      int c = getState() - releases;
      if (Thread.currentThread() != getExclusiveOwnerThread())
          throw new IllegalMonitorStateException();
      boolean free = false;
      //判断状态是否为0，如果是则说明已释放同步状态
      if (c == 0) {
          free = true;
          //设置Owner为null
          setExclusiveOwnerThread(null);
      }
      //设置更新同步状态
      setState(c);
      return free;
  }
</code></pre>
<h4 id="2原子操作类atomic系列基于cas">2.原子操作类(Atomic系列)基于CAS</h4>
<p>i++,不是原子性，可分为三步，取值，相加，赋值。</p>
<p>Atomic保证原子性。常用	:</p>
<ul>
<li>AtomicBoolean：原子更新布尔类型</li>
<li>AtomicInteger：原子更新整型</li>
<li>AtomicLong：原子更新长整型</li>
</ul>
<h2 id="3cas">3.CAS</h2>
<p>V：内存值 A：预期值 B：成功后的赋值</p>
<p>不必担心多个线程同时操作，他是原子性指令。</p>
<h4 id="问题aba问题">问题：ABA问题？</h4>
<p>在获取到当前变量V，准备修改为新值U前，另外两个线程已连续修改了两次变量V的值，使得该值又恢复为旧值，这样的话，我们就无法正确判断这个变量是否已被修改过</p>
<h4 id="一般这种情况很少也一般没什么影响-可以使用某些atomic类解决">一般这种情况很少，也一般没什么影响。可以使用某些Atomic类解决。</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[synchronized和reentrantLock底层原理：]]></title>
        <id>https://ganxinming.github.io/post/synchronized-he-reentrantlock-di-ceng-yuan-li</id>
        <link href="https://ganxinming.github.io/post/synchronized-he-reentrantlock-di-ceng-yuan-li">
        </link>
        <updated>2019-08-25T06:35:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="synchronized">synchronized：</h3>
<p>monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因，同时也是notify/notifyAll/wait等方法存在于顶级对象Object中的原因.</p>
<p>Mark Word中的锁标记(偏向锁，轻量级，重量级)，其中重量级锁指向的是monitor对象，每个对象都存在着一个 monitor 与之关联，但当一个 monitor 被某个线程持有后，它便处于锁定状态。monitor是由ObjectMonitor实现的。ObjectMonitor中有两个队列_WaitSet 和 _EntryList，用来保存ObjectWaiter对象列表( 每个等待锁的线程都会被封装成ObjectWaiter对象)，<br>
_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用 wait() 方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSe t集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。</p>
<h4 id="总结线程获得monitor后-_-ower设置成当前线程count1-若没获得_entrylist-中等待-若此时调用wait释放锁则count-1_ower为null并进入-waitset等待唤醒">总结：线程获得monitor后, _ ower设置成当前线程，count+1。若没获得，_EntryList 中等待。若此时调用wait，释放锁，则count-1，_ower为null，并进入 WaitSet等待唤醒。</h4>
<p>进过javap(反编译)，同步语句块的实现使用的是monitorenter 和 monitorexit 指令。其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置。当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。其他线程阻塞，等到锁释放。</p>
<p>出现两次monitorexit ，是因为有重入。</p>
<h4 id="synchronized方法底层原理">synchronized方法底层原理：</h4>
<p>上面只是普通synchronized代码块的原理，synchronized修饰的方法并没有monitorenter指令和monitorexit指令，取得代之的确实是ACC_SYNCHRONIZED标识，该标识指明了该方法是一个同步方法，JVM通过该ACC_SYNCHRONIZED访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。当方法调用时，调用指令将会 检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。<br>
同时我们还必须注意到的是在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。</p>
<h3 id="reentrantlock">reentrantLock：</h3>
<p>lock只是依赖于API，lock,unlock()。但是为什么这两个方法就可以完成同步加锁呢？</p>
<p>首先看看reentrantLock中有什么类？</p>
<p>reentrantLock内部存在3个实现类，分别是Sync(继承AQS的抽象类)、NonfairSync、FairSync，其中Sync继承自AQS实现了尝试解锁tryRelease()方法，而NonfairSync(非公平锁)、 FairSync(公平锁)则继承自Sync，实现了尝试获取锁的tryAcquire()方法.</p>
<p>/默认构造，创建非公平锁NonfairSync<br>
public ReentrantLock() {<br>
sync = new NonfairSync();<br>
}<br>
//根据传入参数创建锁类型<br>
public ReentrantLock(boolean fair) {<br>
sync = fair ? new FairSync() : new NonfairSync();<br>
}</p>
<p>//加锁操作<br>
public void lock() {<br>
sync.lock();<br>
}</p>
<p>那么为什么这个lock就能实现同步？</p>
<p>final void lock() {<br>
//执行CAS操作，获取同步状态<br>
if (compareAndSetState(0, 1))<br>
//成功则将独占锁线程设置为当前线程<br>
setExclusiveOwnerThread(Thread.currentThread());<br>
else<br>
//否则再次请求同步状态，<br>
acquire(1);<br>
}</p>
<h5 id="底层通过cas操作来判断stateaqs中锁状态位是否占用线程-acquire方法里使用tryacquire尝试获得锁">底层通过CAS操作来判断state(AQS中锁状态位)是否占用线程。acquire方法里使用tryAcquire()尝试获得锁。</h5>
<p>public final void acquire(int arg) {<br>
//再次尝试获取同步状态，这里传入参数arg表示要获取同步状态后设置的值(即要设置state的值)，因为要获取锁，而status为0时是释放锁，1则是获取锁<br>
//tryAcquire(arg)返回true，acquireQueued自然不会执行，这是最理想的，因为毕竟当前线程已获取到锁，如果tryAcquire(arg)返回false，则会执行addWaiter(Node.EXCLUSIVE)进行入队操作<br>
if (!tryAcquire(arg) &amp;&amp;<br>
acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>
selfInterrupt();<br>
}</p>
<h4 id="锁的释放">锁的释放：</h4>
<p>/**释放锁实现<br>
*/<br>
//ReentrantLock类的unlock<br>
public void unlock() {<br>
sync.release(1);<br>
}</p>
<p>public final boolean release(int arg) {<br>
//尝试释放锁<br>
if (tryRelease(arg)) {</p>
<pre><code>Node h = head;
if (h != null &amp;&amp; h.waitStatus != 0)
    //唤醒后继结点的线程
    unparkSuccessor(h);
return true;
</code></pre>
<p>}<br>
return false;}</p>
<h4 id="总结通过synclock实现加锁-lock通过cas获取同步状态若未成功通过acquire不断尝试获取acquire中又通过tryacquire尝试获取-unlock通过release释放锁里面通过tryrelease尝试释放并唤醒后续线程">总结：通过sync.lock()实现加锁。lock()通过CAS获取同步状态，若未成功通过acquire()不断尝试获取，acquire()中又通过tryAcquire()尝试获取。unlock()通过release（）释放锁，里面通过tryRelease(),尝试释放，并唤醒后续线程。</h4>
<h4 id="使用的区别">使用的区别：</h4>
<p>1.无论是使用synchronized还是reentrantLock都是一样，都是用于在某个地方加锁。这个都无所谓<br>
他们的区别无非是：<br>
sychronized:是直接加锁执行完则自动释放了。synchronized(this){}执行完自动释放。<br>
reentrantLock: 是需要在lock.lock()，最后同步代码的结尾是lock.unlock()。<br>
2.我应该明白的是在在哪个位置加锁才有用？<br>
1.比如题目：三个线程分别打印A，B，C,循环十次。那么锁应该加在哪里？<br>
仔细分析下条件，他们分别是在循环中被抢占执行的，所以锁肯定要加在循环中。<br>
在锁中执行完代码，状态标志改变，且唤醒其他线程，并释放锁。<br>
2.比如题目：三个线程分别打印10次A,B,C，循环20次。这里锁加哪里？<br>
竞争条件还是在20次循环中，只不过竞争成功后，执行10次罢了。</p>
<p>3.注意：使用reentrantLock的条件时可以使用三个不同的condition条件。<br>
所以他唤醒时只需使用对应condition唤醒，conditionA.signal(),唤醒单个condition。<br>
但是sychronized不一样，他锁的是同一个对象，只能用this.wait(),这样的话唤醒时不能向上面一样<br>
他必须使用this.notifyAll(),唤醒所有。<br>
当然不是说reentrantLock也必须使用不同条件，其实同理，他也可以使用一个condition，但是唤醒时也是signifAll<br>
所以区别是：synchronize必须notifyAll()，而reentrantLock也可以，但是它可以更细粒度。</p>
<p>4.无论是reentrantLock还是sychronized都必须确保是同一个锁对象。<br>
如：reentrantLock确保三个线程是同一个lock。sychronized确保方法调用时是同一个对象。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git常用命令]]></title>
        <id>https://ganxinming.github.io/post/git-chang-yong-ming-ling</id>
        <link href="https://ganxinming.github.io/post/git-chang-yong-ming-ling">
        </link>
        <updated>2019-07-12T12:14:00.000Z</updated>
        <content type="html"><![CDATA[<p>常用命令：</p>
<p>git log :查看日志</p>
<p>git log  --pretty=oneline :简化日志</p>
<p>git reflog :查看曾使用的命令,</p>
<p>git reset  -- hard HEAD^  : 回退到上一个版本，HEAD代表当前版本,可以写成 HEAD~3 ，回退三个版本</p>
<p>git reset -- hard  [commit id] : 可以通过commit id 来回退版本，commit id不用写全。</p>
<h5 id="详细介绍reset的参数">详细介绍reset的参数：</h5>
<p>git reset  -- soft HEAD^ :将所有已提交的内容恢复到暂存区，本地文件区不受影响。（仅版本库回退一个版本）</p>
<p>git reset  (-- mixed,默认) HEAD^: 将所有已提交的内容和暂存区的内容恢复到上一次版本，本地文件不受影响。(版本库和暂存区 恢复上一次版本)</p>
<p>git reset  -- hard HEAD^	：已提交内容回退上一次版本，清空暂存区，本地文件也回退上一次版本。(包括本地工作区，全都回退上一次版本)</p>
<p>git diff HEAD -- test.txt   :查看当前工作区和版本库的区别。</p>
<h5 id="提下三个区间">提下三个区间：</h5>
<p>工作区：每个人各自写代码的地方。</p>
<p>暂存区：git add 后，代码add后的地方。</p>
<p>版本库：git commit 提交后，提交的地方。</p>
<h4 id="撤销修改">撤销修改：</h4>
<p>假如修改文件还在工作区，没有进行add提交，可使用如下命令恢复：</p>
<p>git checkout -- test.txt  （从版本库拉取文件，使工作区恢复和版本库一致）</p>
<p>假如文件已经add，进入暂存区，但是还没有提交，使用如下：</p>
<p>git reset HEAD test.txt   （使暂存区修改撤销，回到未add前，即commit之前，add之后的操作都回退到add之前。）然后，可以再执行下面命令。</p>
<p>git checkout -- test.txt。</p>
<h3 id="分支">分支：</h3>
<p>创建分支：git branch dev</p>
<p>切换分支：git checkout dev （相当于将当前工作区间从dev复制一份）</p>
<p>或者使用缩写:git checkout  -b dev</p>
<p>查看当前分支：git branch</p>
<p>合并分支：git merge dev （将dev分支合并到当前分支<master>）</p>
<p>删除分支：git branch -d dev</p>
<h4 id="合并分支发生冲突时">合并分支发生冲突时：</h4>
<p>必须手动解决，查看哪些地方有修改的，手动改正。改正add，commit后，自动合并。</p>
<p>查看分支合并树：git log --graph</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Executor家族]]></title>
        <id>https://ganxinming.github.io/post/executor-jia-zu</id>
        <link href="https://ganxinming.github.io/post/executor-jia-zu">
        </link>
        <updated>2019-06-12T07:51:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="executor">Executor</h2>
<p>Executor：执行器是一个接口，只有一个方法execute执行任务，在java的线程池的框架里边，这个是最顶层的接口；<br>
Executors ：操作Executor的一个工具类，用于创建线程池。<br>
ExecutorService：从Executor接口继承,可以管理线程池。是他的Executors.newFixedThreadPool(2);返回值。<br>
Callable：是一个接口，类似于Runnable接口。实现该接口需重写call方法。<strong>该方法有返回值</strong>。<br>
Future ：是线程池提交处理callable后，产生的返回值。</p>
<h4 id="四种线程池">四种线程池</h4>
<p>种线程池区别：</p>
<ul>
<li>1.newFixedThreadPool ：产生指定的线程，比如4个，那么一次只能运行4个线程，后来的必须排队，等到线程有空闲才能进行。</li>
<li>2.newCachedThreadPool ：可以重用之前已构造的可用线程（就是上一个可以用的线程），如果不存在可用线程，那么会重新创建一个新的线程并将其加入到线程池中</li>
<li>3.newSingleThreadExecutor ：产生单个线程，只能处理一个线程</li>
<li>4.newScheduledThreadPool  ：执行定时的任务，定时器线程池</li>
</ul>
<h2 id="四种线程创建的方法如下">四种线程创建的方法如下：</h2>
<pre><code>package basis.ThreadTest.simple;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.*;

/**
 * @Author Badribbit
 * @create 2019/6/8 20:04
 * @Define 创建线程的四种方式
 * @Tutorials
 * @Opinion:
 *
 * 对于实现Callable接口通过FutureTask包装器来创建Thread线程
 * 1.实现Callable接口2.创建FutureTask（他实现了runnable）3.实例化化Thread
 * 对于使用ExecutorService、Callable、Future实现有返回结果的线程
 * 1.实现Callable接口2.通过在main方法中的线程池的submit方法执行。3.得到future对象（返回的对象）
 * 重要：1.Runnable接口，需要实例化Thread才能调用start方法。
 *      2.线程池两种执行线程方法,execute()和submit().
 *      execute()主要针对的Runnable的类，他没有返回值
 *      submit() 主要针对的Callable的类，他有返回值，且返回值用future定义。
 *      3.future通过get()获得返回值。
 */
public class SimpleTest1 {

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        //Thread 方式实现
        St1 s1=new St1();
        s1.start();
        //Runnable 方式实现
        St2 s2=new St2();
        Thread ts2=new Thread(s2);
        ts2.start();
        //实现Callable接口通过FutureTask包装器来创建Thread线程
        //由Callable&lt;Integer&gt;创建一个FutureTask&lt;Integer&gt;对象：
        Callable callable=new SomeCallable();
        //注释：FutureTask&lt;Integer&gt;是一个包装器，它通过接受Callable&lt;Integer&gt;来创建，它同时实现了Future和Runnable接口
        FutureTask futureTask=new FutureTask(callable);
        Thread s3=new Thread(futureTask);
        s3.start();
        //使用ExecutorService、Callable、Future实现有返回结果的线程
        //创建一个线程池,返回一个ExecutorService。
        ExecutorService pool= Executors.newFixedThreadPool(4);
        //Future就是Callable的call方法返回的封装了结果的对象
        List&lt;Future&gt; list=new ArrayList&lt;Future&gt;();
        for (int i=0;i&lt;9;i++){
            Callable callable1=new OtherCallable(&quot;&quot;+i);
            //submit提交Callable，执行并有返回值,用future接受
            Future future=pool.submit(callable1);
            list.add(future);
        }
        //关闭线程池
        pool.shutdown();
        // 获取所有并发任务的运行结果
       for (int i=0;i&lt;9;i++){
           Future future=list.get(i);
           //future通过get方法，取返回的对象。
           System.out.println(future.get().toString());
       }
    }
}

class St1 extends Thread{
    @Override
    public void run() {
        super.run();
        System.out.println(&quot;通过继承Thread方式运行&quot;);
    }
}

/**
 * 因为Runnable没有start方法，需要Thread ts2=new Thread(s2);将它变成Thread类。
 */
class St2 implements Runnable{
    @Override
    public void run() {
        System.out.println(&quot;通过实现Runnable接口&quot;);
    }
}

/**
 * 实现Callable接口通过FutureTask包装器来创建Thread线程
 * @param
 */
class SomeCallable implements Callable{

    @Override
    public Object call() throws Exception {
        System.out.println(&quot;实现Callable接口通过FutureTask包装器来创建Thread线程&quot;);
        return null;
    }
}

/**
 * 使用ExecutorService、Callable、Future实现有返回结果的线程
 */
class OtherCallable implements Callable{
    private String name;
    public OtherCallable(String name){
        this.name=name;
    }
    @Override
    public Object call() throws Exception {
        Date date=new Date();
        System.out.println(&quot;线程名&quot;+name);
        System.out.println(&quot;开始运行时间&quot;+date.toString());
        return  date;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Concurrent并发包下的类]]></title>
        <id>https://ganxinming.github.io/post/concurrent-bing-fa-bao-xia-de-lei</id>
        <link href="https://ganxinming.github.io/post/concurrent-bing-fa-bao-xia-de-lei">
        </link>
        <updated>2019-06-11T01:38:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实现并发1阻塞式加锁-2非阻塞式循环cas操作">实现并发：1.阻塞式，加锁。2.非阻塞式，循环CAS操作。</h3>
<h3 id="1concurrentlinkedqueue">1.ConcurrentLinkedQueue</h3>
<h5 id="简介">简介：</h5>
<p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO（先进先出）原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。<br>
新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue 是一个恰当的选择。此队列不允许使用 null 元素。</p>
<h4 id="常用api">常用API：</h4>
<p>offer( E e) 将元素插入尾部 （类似add）<br>
poll() 取出队头元素并移除队列，如果没有，返回null（类似pop）<br>
peek() 取出队头元素不移除队列.</p>
<h3 id="2concurrenthashmap">2.ConcurrentHashMap</h3>
<h4 id="简介-2">简介：</h4>
<h4 id="jdk18之前">jdk1.8之前：</h4>
<p>ConcurrentHashMap的数据结构是由一个Segment数组和多个HashEntry组成，如下图所示<br>
<img src="https://ganxinming.github.io/post-images/1560259573550.png" alt=""><br>
将整个hashmap分成几个小的map，每个segment都是一个锁；与hashtable相比，这么设计的目的是对于put, remove等操作，可以减少并发冲突。<br>
并发控制：是将一个大的table分割成多个小的table来进行加锁，也就是的锁分离技术。<br>
不属于同一个片段的节点可以并发操作，大大提高了性能<br>
本质上Segment类就是一个小的hashmap，里面table数组存储了各个节点的数据，继承了ReentrantLock, 可以作为互拆锁使用。</p>
<h4 id="如果不是segments而是对整个table加锁那么效率低下也就是hashtbalehashtable是对整个表加锁效率低下">如果不是segments，而是对整个table加锁，那么效率低下，也就是hashTbale，Hashtable是对整个表加锁，效率低下。</h4>
<h4 id="jdk18之后">jdk1.8之后：</h4>
<p>改进一：取消segments字段，直接采用transient volatile HashEntry&lt;K,V&gt;[] table保存数据，采用table数组元素作为锁，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率。jDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作.如下：<br>
<img src="https://ganxinming.github.io/post-images/1560260059020.png" alt=""><br>
改进二：将原先table数组＋单向链表的数据结构，变更为table数组＋单向链表＋红黑树的结构。对于hash表来说，最核心的能力在于将key hash之后能均匀的分布在数组中</p>
<h3 id="总结结构采用table数组单向链表红黑树的结构并发控制采用synchronized和cas来操作原来是segments和锁分离技术">总结：结构采用table数组＋单向链表＋红黑树的结构，并发控制采用Synchronized和CAS来操作（原来是：segments，和锁分离技术）</h3>
<h3 id="3concurrentskiplistmap">3.ConcurrentSkipListMap</h3>
<h4 id="特性支持包并发排序-所以插入速度快">特性：支持包并发，排序。（所以插入速度快）</h4>
<p>hashmap是无序的。TreeMap是有序的，底层是根据红黑树来维持排序，相对来说复杂。<br>
而ConcurrentSkipListMap，是基于<strong>跳表</strong>。</p>
<h4 id="跳表">跳表</h4>
<p>是一种随机化的数据结构，通过“空间来换取时间”的一个算法，建立多级索引，实现以二分查找遍历一个有序链表。时间复杂度等同于红黑树，O(log n)。但实现却远远比红黑树要简单。底层结构，可以百度。</p>
<h3 id="4copyonwritelist">4.CopyOnWriteList</h3>
<h4 id="特性支持高并发的list-适合读多写少的操作写时复制">特性：支持高并发的list。适合读多写少的操作（写时复制）</h4>
<p>写：即添加元素时。 在原来的list中，存在安全问题，例如add(e)时，这一瞬间，可能另一个线程读数据，或者读list长度时，会出现脏读的问题。所以要保证线程安全，读的时候需要加锁，且不能加数据。（这是原来的思想）<br>
但是CopyOnWriteList不需要。CopyOnWriteList使用了一种叫写时复制的方法。先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。（整个过程是原子性的，他前后数据一定是一致的，没有中间状态；因为它在新的复制一份的里面做更改，更改完了以后马上把引用指向新的）</p>
<h4 id="有啥好处假如我拿到一份引用根本不需要关心他做过删除还是增加因为这个引用始终是指向完成操作即删除还是增加之后的list">有啥好处？假如我拿到一份引用，根本不需要关心他做过删除还是增加，因为这个引用始终是指向完成操作（即删除还是增加）之后的list。</h4>
<h4 id="适合写少读多">适合写少，读多。</h4>
<h3 id="5blockingqueue">5.BlockingQueue</h3>
<h4 id="特性">特性：</h4>
<p>1.当线程向队列中插入元素时，如果队列已满，则阻塞线程，直到队列有空闲位置（非满）<br>
2.当线程从队列中取元素（删除队列元素）时，如果队列未空，则阻塞线程，直到队列有元素；</p>
<h3 id="api">API :</h3>
<p>offer(E e): 将给定的元素设置到队列中，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。<br>
offer(E e, long timeout, TimeUnit unit): 将给定元素在给定的时间内设置到队列中，如果设置成功返回true, 否则返回false.<br>
add(E e): 将给定元素设置到队列中，如果设置成功返回true, 否则抛出异常。如果是往限定了长度的队列中设置值，推荐使用offer()方法。<br>
put(E e): 将元素设置到队列中，如果队列中没有多余的空间，该方法会一直阻塞，直到队列中有多余的空间。<br>
take(): 从队列中获取值，如果队列中没有值，线程会一直阻塞，直到队列中有值，并且该方法取得了该值<br>
。<br>
poll(long timeout, TimeUnit unit): 获取并移除此队列的头元素，可以在指定的等待时间前等待可用的元素，timeout表明放弃之前要等待的时间长度，用 unit 的时间单位表示，如果在元素可用前超过了指定的等待时间，则返回null，当等待时可以被中断。</p>
<h4 id="适用于生产者消费者这种情况">适用于生产者，消费者这种情况。</h4>
<h4 id="一般使用四个子类linkedblockingqueuearrayblockingqueuedelayqueuetransferqueue">一般使用四个子类LinkedBlockingQueue，ArrayBlockingQueue，DelayQueue，TransferQueue。</h4>
<p><strong>LinkedBockingQueue</strong>：是链表实现的阻塞式容器，是无界队列（往里扔多少个元素都可以，内存满足的情况下）<br>
<strong>ArrayBlockingQueue</strong>：有界队列（需要指定大小）<br>
<strong>DelayQueue</strong> ：是一个支持延时获取元素的无界阻塞队列。只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的Delayed 元素。<br>
适用场景：定时任务调度（考试后30分钟才能交卷）<br>
<strong>TransferQueue</strong>：提供了transfer方法，一般是这种情形，有一个队列，消费者线程先启动，然后生产者生产一个东西的时候不是往队列里头仍，它首先去找有没有消费者，如果有消费者，生产的东西不往队列里扔了而是直接给消费者消费；如果没有消费者的话，调用transfer线程就会阻塞；<br>
<strong>SynchronousQueue叫做没有容量的队列（TransferQueue一种特殊情况），容量为0，生产者生产的东西必须马上消费掉，如果不消费掉就会出问题；调add抛异常（Queue full），调put程序阻塞；</strong></p>
<h4 id="小结以上五个虽然都不相同但是都是阻塞式即满了阻塞空了等待">小结：以上五个虽然都不相同，但是都是阻塞式，即满了阻塞，空了等待。</h4>
<h2 id="总结">总结：</h2>
<p>对于map/set的选择使用<br>
HashMap       不需要多线程的情况下使用<br>
TreeMap       不需要多线程的情况下使用<br>
LinkedHashMap 不需要多线程的情况下使用</p>
<p>Hashtable     并发量比较小<br>
Collections.sychronizedXXX  并发量比较小</p>
<p>ConcurrentHashMap       高并发<br>
ConcurrentSkipListMap   高并发同时要求排好顺序</p>
<p>2：队列<br>
ArrayList        不需要同步的情况<br>
LinkedList      不需要同步的情况<br>
Collections.synchronizedXXX  并发量低<br>
Vector                            并发量低<br>
CopyOnWriteList              写的时候少，读时候多<br>
Queue<br>
CocurrentLinkedQueue //concurrentArrayQueue    高并发队列<br>
BlockingQueue                                        阻塞式<br>
LinkedBQ    无界<br>
ArrayBQ     有界<br>
TransferQueue   直接给消费者线程，如果没有消费者阻塞<br>
SynchronusQueue  特殊的transferQueue,容量0<br>
DelayQueue执行定时任务</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda表达式]]></title>
        <id>https://ganxinming.github.io/post/lambda-biao-da-shi</id>
        <link href="https://ganxinming.github.io/post/lambda-biao-da-shi">
        </link>
        <updated>2019-06-10T12:41:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="lambda简单使用">Lambda简单使用</h3>
<h4 id="1基本语法">1.基本语法</h4>
<p>基本语法:<br>
(parameters) -&gt; expression<br>
或<br>
(parameters) -&gt;{ statements; }</p>
<pre><code>/ 1. 不需要参数,返回值为 5  
() -&gt; 5  
  
// 2. 接收一个参数(数字类型),返回其2倍的值  
x -&gt; 2 * x  
  
// 3. 接受2个参数(数字),并返回他们的差值  
(x, y) -&gt; x – y  
  
// 4. 接收2个int型整数,返回他们的和  
(int x, int y) -&gt; x + y  
  
// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  
(String s) -&gt; System.out.print(s)  
</code></pre>
<h4 id="2遍历list">2.遍历list</h4>
<pre><code>List&lt;String&gt; players =  Arrays.asList(atp);  
  
// 以前的循环方式  
for (String player : players) {  
     System.out.print(player + &quot;; &quot;);  
}  
  
// 使用 lambda 表达式以及函数操作(functional operation)  
players.forEach((player) -&gt; System.out.print(player + &quot;; &quot;));  
   
// 在 Java 8 中使用双冒号操作符(double colon operator)  
players.forEach(System.out::println);  
</code></pre>
<h4 id="3实现线程">3.实现线程</h4>
<pre><code>// 1.1使用匿名内部类  
new Thread(new Runnable() {  
    @Override  
    public void run() {  
        System.out.println(&quot;Hello world !&quot;);  
    }  
}).start();  
  
// 1.2使用 lambda expression  
new Thread(() -&gt; System.out.println(&quot;Hello world !&quot;)).start();  
  
// 2.1使用匿名内部类  
Runnable race1 = new Runnable() {  
    @Override  
    public void run() {  
        System.out.println(&quot;Hello world !&quot;);  
    }  
};  
  
// 2.2使用 lambda expression  
Runnable race2 = () -&gt; System.out.println(&quot;Hello world !&quot;);  
   
// 直接调用 run 方法(没开新线程哦!)  
race1.run();  
race2.run();  
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Synchronized关键字]]></title>
        <id>https://ganxinming.github.io/post/synchronized-guan-jian-zi</id>
        <link href="https://ganxinming.github.io/post/synchronized-guan-jian-zi">
        </link>
        <updated>2019-06-10T02:33:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="synchonized分别不同加锁方法">Synchonized分别不同加锁方法</h2>
<p>1.给某个属性对象加锁。<br>
private Object o=new Object();<br>
sychronized(o){}.<br>
2.给当前对象加锁(锁的是当前对象，当多个线程调用这个类时，使用同一个对象时，只有先获得的先执行)<br>
sychronized(this){}.<br>
3.给方法加锁。（相当于sychronized(this），就是加锁当前对象）<br>
public synchronized  void m(){}<br>
4.给静态方法加锁。（这里等同于T.class，给类对象加锁）<br>
public synchronized static void m() 。<br>
5.给类对象加锁<br>
synchronized(T.class)</p>
<h3 id="记住synchonized只是锁对象"><strong>记住Synchonized只是锁对象</strong></h3>
<p>代码如下</p>
<pre><code>package basis.ThreadTest.simple;

/**
 * @Author Badribbit
 * @create 2019/6/10 10:52
 * @Define Synchronized关键字测试(五种锁对象)
 * @Tutorials
 * @Opinion 1.new Thread(synchronizedTest)和new Thread(new SynchronizedTest())的区别。
 *          锁当前对象或变量对象时对同一个synchronizedTest就有效，但是对每次new SynchronizedTest()无效，因为这些是新new的对象
 *          锁类对象，对new SynchronizedTest()无效。但是得保证里面使用的变量是静态的，如果不是静态的，实际上那些成员变量还是各有各的默认值,
 *          不能达到统一访问的目的。
 *          2.锁静态方法，里面必须是static变量。锁class对象，没有必须，但是想要统一访问，也要使用static变量。
 */
public class SynchronizedTest implements Runnable{
    private  Object o=new Object();
    private  volatile int con=0;
    private  volatile static int sum=0;
    public void m1() throws InterruptedException {
        synchronized (o) {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);
        }
    }
    public void m2() throws InterruptedException {
        synchronized (this) {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);
        }
    }
    public synchronized void m3() throws InterruptedException {
            System.out.println(Thread.currentThread().getName() + &quot;的con是:&quot; + con++);
            Thread.sleep(100);

    }
    public synchronized static void m4() throws InterruptedException {
        System.out.println(Thread.currentThread().getName() + &quot;的sum是:&quot; + sum++);
        Thread.sleep(100);
    }
    public void m5() throws InterruptedException {
        synchronized (SynchronizedTest.class) {
            System.out.println(Thread.currentThread().getName() + &quot;的sum是:&quot; + sum++);
            Thread.sleep(100);
        }
    }
    @Override
    public void run() {
        try {
            m5();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    public static void main(String[] args) {
        SynchronizedTest synchronizedTest=new SynchronizedTest();
        /*for (int i=0;i&lt;9;i++){
            new Thread(synchronizedTest,String.valueOf((char)(i+97))).start();
        }*/
        for (int i=0;i&lt;9;i++){
            new Thread(new SynchronizedTest(),String.valueOf((char)(i+97))).start();
        }
    }


}

</code></pre>
<h4 id="锁重入">锁重入</h4>
<p>可以在Synchonized中调用其他Synchonized方法。</p>
]]></content>
    </entry>
</feed>